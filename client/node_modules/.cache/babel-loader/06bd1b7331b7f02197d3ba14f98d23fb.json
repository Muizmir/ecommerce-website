{"ast":null,"code":"'use strict';\n\nvar isRegexp = require('is-regexp');\n\nvar isPlainObj = require('is-plain-obj');\n\nmodule.exports = function (val, opts, pad) {\n  var seen = [];\n  return function stringify(val, opts, pad) {\n    opts = opts || {};\n    opts.indent = opts.indent || '\\t';\n    pad = pad || '';\n    var tokens;\n\n    if (opts.inlineCharacterLimit == void 0) {\n      tokens = {\n        newLine: '\\n',\n        newLineOrSpace: '\\n',\n        pad: pad,\n        indent: pad + opts.indent\n      };\n    } else {\n      tokens = {\n        newLine: '@@__STRINGIFY_OBJECT_NEW_LINE__@@',\n        newLineOrSpace: '@@__STRINGIFY_OBJECT_NEW_LINE_OR_SPACE__@@',\n        pad: '@@__STRINGIFY_OBJECT_PAD__@@',\n        indent: '@@__STRINGIFY_OBJECT_INDENT__@@'\n      };\n    }\n\n    var expandWhiteSpace = function (string) {\n      if (opts.inlineCharacterLimit == void 0) {\n        return string;\n      }\n\n      var oneLined = string.replace(new RegExp(tokens.newLine, 'g'), '').replace(new RegExp(tokens.newLineOrSpace, 'g'), ' ').replace(new RegExp(tokens.pad + '|' + tokens.indent, 'g'), '');\n\n      if (oneLined.length <= opts.inlineCharacterLimit) {\n        return oneLined;\n      } else {\n        return string.replace(new RegExp(tokens.newLine + '|' + tokens.newLineOrSpace, 'g'), '\\n').replace(new RegExp(tokens.pad, 'g'), pad).replace(new RegExp(tokens.indent, 'g'), pad + opts.indent);\n      }\n    };\n\n    if (seen.indexOf(val) !== -1) {\n      return '\"[Circular]\"';\n    }\n\n    if (val === null || val === undefined || typeof val === 'number' || typeof val === 'boolean' || typeof val === 'function' || isRegexp(val)) {\n      return String(val);\n    }\n\n    if (val instanceof Date) {\n      return 'new Date(\\'' + val.toISOString() + '\\')';\n    }\n\n    if (Array.isArray(val)) {\n      if (val.length === 0) {\n        return '[]';\n      }\n\n      seen.push(val);\n      var ret = '[' + tokens.newLine + val.map(function (el, i) {\n        var eol = val.length - 1 === i ? tokens.newLine : ',' + tokens.newLineOrSpace;\n        return tokens.indent + stringify(el, opts, pad + opts.indent) + eol;\n      }).join('') + tokens.pad + ']';\n      seen.pop(val);\n      return expandWhiteSpace(ret);\n    }\n\n    if (isPlainObj(val)) {\n      var objKeys = Object.keys(val);\n\n      if (objKeys.length === 0) {\n        return '{}';\n      }\n\n      seen.push(val);\n      var ret = '{' + tokens.newLine + objKeys.map(function (el, i) {\n        if (opts.filter && !opts.filter(val, el)) {\n          return '';\n        }\n\n        var eol = objKeys.length - 1 === i ? tokens.newLine : ',' + tokens.newLineOrSpace;\n        var key = /^[a-z$_][a-z$_0-9]*$/i.test(el) ? el : stringify(el, opts);\n        return tokens.indent + key + ': ' + stringify(val[el], opts, pad + opts.indent) + eol;\n      }).join('') + tokens.pad + '}';\n      seen.pop(val);\n      return expandWhiteSpace(ret);\n    }\n\n    val = String(val).replace(/[\\r\\n]/g, function (x) {\n      return x === '\\n' ? '\\\\n' : '\\\\r';\n    });\n\n    if (opts.singleQuotes === false) {\n      return '\"' + val.replace(/\"/g, '\\\\\\\"') + '\"';\n    }\n\n    return '\\'' + val.replace(/'/g, '\\\\\\'') + '\\'';\n  }(val, opts, pad);\n};","map":null,"metadata":{},"sourceType":"script"}