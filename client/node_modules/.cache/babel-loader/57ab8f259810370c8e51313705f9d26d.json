{"ast":null,"code":"\"use strict\";\n\nvar cssesc = require(\"cssesc\");\n\nvar stringify;\n\nfunction escape(str, stringType) {\n  return cssesc(str, {\n    quotes: stringType === \"\\\"\" ? \"double\" : \"single\"\n  });\n}\n\nfunction stringifyWithoutBeforeAfter(tree) {\n  switch (tree.type) {\n    case \"values\":\n      return tree.nodes.map(stringify).join(\",\");\n\n    case \"value\":\n      return tree.nodes.map(stringify).join(\"\");\n\n    case \"item\":\n      return tree.name;\n\n    case \"nested-item\":\n      return tree.name + \"(\" + tree.nodes.map(stringify).join(\",\") + \")\";\n\n    case \"invalid\":\n      return tree.value;\n\n    case \"comment\":\n      return \"/*\" + tree.content + \"*/\";\n\n    case \"string\":\n      switch (tree.stringType) {\n        case \"'\":\n          return \"'\" + escape(tree.value, \"'\") + \"'\";\n\n        case \"\\\"\":\n          return \"\\\"\" + escape(tree.value, \"\\\"\") + \"\\\"\";\n      }\n      /* istanbul ignore next */\n\n\n      throw new Error(\"Invalid stringType\");\n\n    case \"url\":\n      var start = \"url(\" + (tree.innerSpacingBefore || \"\");\n      var end = (tree.innerSpacingAfter || \"\") + \")\";\n\n      switch (tree.stringType) {\n        case \"'\":\n          return start + \"'\" + tree.url.replace(/(\\\\)/g, \"\\\\$1\").replace(/'/g, \"\\\\'\") + \"'\" + end;\n\n        case \"\\\"\":\n          return start + \"\\\"\" + tree.url.replace(/(\\\\)/g, \"\\\\$1\").replace(/\"/g, \"\\\\\\\"\") + \"\\\"\" + end;\n\n        default:\n          return start + tree.url.replace(/(\"|'|\\)|\\\\)/g, \"\\\\$1\") + end;\n      }\n\n  }\n}\n\nstringify = function stringify(tree) {\n  var str = stringifyWithoutBeforeAfter(tree);\n\n  if (tree.before) {\n    str = tree.before + str;\n  }\n\n  if (tree.after) {\n    str = str + tree.after;\n  }\n\n  return str;\n};\n\nmodule.exports = stringify;","map":null,"metadata":{},"sourceType":"script"}