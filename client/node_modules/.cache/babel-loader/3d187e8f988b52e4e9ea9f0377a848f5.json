{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar _icssReplaceSymbols = require('icss-replace-symbols');\n\nvar _icssReplaceSymbols2 = _interopRequireDefault(_icssReplaceSymbols);\n\nvar importRegexp = /^:import\\((.+)\\)$/;\n\nvar Parser = function () {\n  function Parser(pathFetcher, trace) {\n    _classCallCheck(this, Parser);\n\n    this.pathFetcher = pathFetcher;\n    this.plugin = this.plugin.bind(this);\n    this.exportTokens = {};\n    this.translations = {};\n    this.trace = trace;\n  }\n\n  _createClass(Parser, [{\n    key: \"plugin\",\n    value: function plugin(css, result) {\n      var _this = this;\n\n      return Promise.all(this.fetchAllImports(css)).then(function (_) {\n        return _this.linkImportedSymbols(css);\n      }).then(function (_) {\n        return _this.extractExports(css);\n      });\n    }\n  }, {\n    key: \"fetchAllImports\",\n    value: function fetchAllImports(css) {\n      var _this2 = this;\n\n      var imports = [];\n      css.each(function (node) {\n        if (node.type == \"rule\" && node.selector.match(importRegexp)) {\n          imports.push(_this2.fetchImport(node, css.source.input.from, imports.length));\n        }\n      });\n      return imports;\n    }\n  }, {\n    key: \"linkImportedSymbols\",\n    value: function linkImportedSymbols(css) {\n      (0, _icssReplaceSymbols2[\"default\"])(css, this.translations);\n    }\n  }, {\n    key: \"extractExports\",\n    value: function extractExports(css) {\n      var _this3 = this;\n\n      css.each(function (node) {\n        if (node.type == \"rule\" && node.selector == \":export\") _this3.handleExport(node);\n      });\n    }\n  }, {\n    key: \"handleExport\",\n    value: function handleExport(exportNode) {\n      var _this4 = this;\n\n      exportNode.each(function (decl) {\n        if (decl.type == 'decl') {\n          Object.keys(_this4.translations).forEach(function (translation) {\n            decl.value = decl.value.replace(translation, _this4.translations[translation]);\n          });\n          _this4.exportTokens[decl.prop] = decl.value;\n        }\n      });\n      exportNode.remove();\n    }\n  }, {\n    key: \"fetchImport\",\n    value: function fetchImport(importNode, relativeTo, depNr) {\n      var _this5 = this;\n\n      var file = importNode.selector.match(importRegexp)[1],\n          depTrace = this.trace + String.fromCharCode(depNr);\n      return this.pathFetcher(file, relativeTo, depTrace).then(function (exports) {\n        importNode.each(function (decl) {\n          if (decl.type == 'decl') {\n            _this5.translations[decl.prop] = exports[decl.value];\n          }\n        });\n        importNode.remove();\n      }, function (err) {\n        return console.log(err);\n      });\n    }\n  }]);\n\n  return Parser;\n}();\n\nexports[\"default\"] = Parser;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}