{"ast":null,"code":"// Trying to keep few and reasonably simple dependencies.\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _cssify = require('cssify');\n\nvar _cssify2 = _interopRequireDefault(_cssify);\n\nvar _urlParse = require('url-parse');\n\nvar _urlParse2 = _interopRequireDefault(_urlParse);\n\nvar _Badge = require('./Badge');\n\nvar _Badge2 = _interopRequireDefault(_Badge);\n/* This loads Font Awesome icons from the classic bootstrap CDN, rather than including them in this\n * package. Maybe I'll change my mind, but I'd rather have less distribution duplication and the\n * current implimentations of font-awesome for React through NPM have serious disagreements with\n * browserify and I'm not smart enough to figure out the issue. Bare with me.\n */\n\n\n_cssify2['default'].byUrl('//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css');\n/* Simple icons, or rather, icons which have their hostname agree with my preffered version of \n * their Font Awesome icon name. These are converted to a key:\"key\" object to be merged later.\n */\n\n\nvar simpleIcons = ['facebook', 'github', 'bitbucket', 'deviantart', 'etsy', 'flickr', 'instagram', 'linkedin', 'meetup', 'paypal', 'skype', 'soundcloud', 'spotify', 'slack', 'twitter', 'wordpress', 'tumblr', 'stumbleupon', 'twitch', 'vimeo', 'yelp'].reduce(function (a, b) {\n  a[b] = b;\n  return a;\n}, {});\n/* Merge simple icons with icons who have disagreements between the hostname and Font Awesome icon\n * of my preference.\n */\n\nvar urlToIcon = _extends({}, simpleIcons, {\n  freecodecamp: 'free-code-camp',\n  'plus.google': 'google-plus',\n  pinterest: 'pinterest-p',\n  reddit: 'reddit-alien',\n  snapchat: 'snapchat-ghost',\n  steamcommunity: 'steam',\n  youtube: 'youtube-play',\n  stackexchange: 'stack-exchange'\n});\n\nvar ReactSocialBadge = function ReactSocialBadge(props) {\n  // Collect hostname from provided URL which is a required prop\n  var hostname = new URL(props.url).hostname;\n  /* Determine the icon we need to pick, the first priority is the manually set icon via props\n   * which will override the automatically determined icon via URL parsing. The fallback is a\n   * questionmark icon which will hopefully make it clear that there was no icon by the required\n   * name.\n   */\n\n  var icon = props.icon || urlToIcon[Object.keys(urlToIcon).find(function (x) {\n    return hostname.includes(x);\n  })] || 'question';\n  /* Determine the size of the badge, first check for S/M/L labels, fall back to medium if \n   * no size is specified. If none of these conditions are met, attempt to assign to what is\n   * assumed to be a number of pixels specified by users.\n   */\n\n  var size = function () {\n    var s = props.size;\n\n    switch (s) {\n      case 'small':\n        return 30; // px\n\n        break;\n\n      case undefined:\n      case 'medium':\n        return 45; // px\n\n        break;\n\n      case 'large':\n        return 60; // px\n\n        break;\n\n      default:\n        return Number(s); // px\n\n        break;\n    }\n  }(); // Default width is 60% of container, this is multiplied by specified iconScale\n\n\n  var iconScale = (Number(props.iconScale) || 1.0) * 0.6;\n  /* To deal with expectations I allow for className and badgeClassName to be set.\n   * They are simple combined so that people can specify if they desire.\n   */\n\n  var badgeClassName = (props.className || '') + ' ' + (props.badgeClassName || ''); // Add default styling and merge badgeStyle Prop\n\n  var badgeStyle = _extends({\n    display: 'inline-block',\n    width: size + 'px',\n    height: size + 'px',\n    borderRadius: '50%',\n    margin: '2px',\n    backgroundColor: props.badgeColor || 'rgb(187, 0, 0)'\n  }, props.badgeStyle); // Add default styling and merge iconStyle Prop\n\n\n  var iconStyle = _extends({\n    display: 'inline-block',\n    width: '100%',\n    fontSize: Math.round(size * iconScale) + 'px',\n    color: props.iconColor || 'white',\n    textAlign: 'center',\n    textDecoration: 'none',\n    lineHeight: size + 'px'\n  }, props.iconStyle); // Create the actual badge with a much less smart component\n\n\n  return _react2['default'].createElement(_Badge2['default'], {\n    url: props.url,\n    badgeStyle: badgeStyle,\n    iconStyle: iconStyle,\n    icon: icon,\n    badgeClassName: badgeClassName,\n    iconClassName: props.iconClassName\n  });\n}; // Set PropTypes for component\n\n\nReactSocialBadge.propTypes = {\n  badgeClassName: _react2['default'].PropTypes.string,\n  badgeColor: _react2['default'].PropTypes.string,\n  badgeStyle: _react2['default'].PropTypes.object,\n  className: _react2['default'].PropTypes.object,\n  icon: _react2['default'].PropTypes.string,\n  iconClassName: _react2['default'].PropTypes.string,\n  iconColor: _react2['default'].PropTypes.string,\n  iconScale: _react2['default'].PropTypes.number,\n  iconStyle: _react2['default'].PropTypes.object,\n  size: _react2['default'].PropTypes.string,\n  url: _react2['default'].PropTypes.string.isRequired\n};\nexports['default'] = ReactSocialBadge;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}