{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return']) _i['return']();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError('Invalid attempt to destructure non-iterable instance');\n    }\n  };\n}();\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _postcss = require('postcss');\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar declWhitelist = ['composes'],\n    declFilter = new RegExp('^(' + declWhitelist.join('|') + ')$'),\n    matchImports = /^(.+?)\\s+from\\s+(?:\"([^\"]+)\"|'([^']+)'|(global))$/,\n    icssImport = /^:import\\((?:\"([^\"]+)\"|'([^']+)')\\)/;\n\nvar processor = _postcss2['default'].plugin('modules-extract-imports', function (options) {\n  return function (css) {\n    var imports = {},\n        importIndex = 0,\n        createImportedName = options && options.createImportedName || function (importName\n    /*, path*/\n    ) {\n      return 'i__imported_' + importName.replace(/\\W/g, '_') + '_' + importIndex++;\n    }; // Find any declaration that supports imports\n\n\n    css.walkDecls(declFilter, function (decl) {\n      var matches = decl.value.match(matchImports);\n      var tmpSymbols = undefined;\n\n      if (matches) {\n        var _matches = _slicedToArray(matches, 5);\n\n        var\n        /*match*/\n        symbols = _matches[1];\n        var doubleQuotePath = _matches[2];\n        var singleQuotePath = _matches[3];\n        var _global = _matches[4];\n\n        if (_global) {\n          // Composing globals simply means changing these classes to wrap them in global(name)\n          tmpSymbols = symbols.split(/\\s+/).map(function (s) {\n            return 'global(' + s + ')';\n          });\n        } else {\n          (function () {\n            var path = doubleQuotePath || singleQuotePath;\n            imports[path] = imports[path] || {};\n            tmpSymbols = symbols.split(/\\s+/).map(function (s) {\n              if (!imports[path][s]) {\n                imports[path][s] = createImportedName(s, path);\n              }\n\n              return imports[path][s];\n            });\n          })();\n        }\n\n        decl.value = tmpSymbols.join(' ');\n      }\n    }); // If we've found any imports, insert or append :import rules\n\n    var existingImports = {};\n    css.walkRules(function (rule) {\n      var matches = icssImport.exec(rule.selector);\n\n      if (matches) {\n        var _matches2 = _slicedToArray(matches, 3);\n\n        var\n        /*match*/\n        doubleQuotePath = _matches2[1];\n        var singleQuotePath = _matches2[2];\n        existingImports[doubleQuotePath || singleQuotePath] = rule;\n      }\n    });\n    Object.keys(imports).reverse().forEach(function (path) {\n      var rule = existingImports[path];\n\n      if (!rule) {\n        rule = _postcss2['default'].rule({\n          selector: ':import(\"' + path + '\")',\n          raws: {\n            after: \"\\n\"\n          }\n        });\n        css.prepend(rule);\n      }\n\n      Object.keys(imports[path]).forEach(function (importedSymbol) {\n        rule.append(_postcss2['default'].decl({\n          value: importedSymbol,\n          prop: imports[path][importedSymbol],\n          raws: {\n            before: \"\\n  \"\n          }\n        }));\n      });\n    });\n  };\n});\n\nexports['default'] = processor;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}